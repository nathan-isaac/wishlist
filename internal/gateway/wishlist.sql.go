// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: wishlist.sql

package gateway

import (
	"context"
	"database/sql"
)

const createWishlist = `-- name: CreateWishlist :exec
INSERT INTO wishlist (id, name, description)
VALUES (?, ?, ?)
`

type CreateWishlistParams struct {
	ID          string
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateWishlist(ctx context.Context, arg CreateWishlistParams) error {
	_, err := q.db.ExecContext(ctx, createWishlist, arg.ID, arg.Name, arg.Description)
	return err
}

const deleteWishlist = `-- name: DeleteWishlist :exec
DELETE
FROM wishlist
WHERE id = ?
`

func (q *Queries) DeleteWishlist(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteWishlist, id)
	return err
}

const getWishlist = `-- name: GetWishlist :one
SELECT id, name, description
FROM wishlist
WHERE id = ? LIMIT 1
`

func (q *Queries) GetWishlist(ctx context.Context, id string) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, getWishlist, id)
	var i Wishlist
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listWishlists = `-- name: ListWishlists :many
SELECT id, name, description
FROM wishlist
ORDER BY name
`

func (q *Queries) ListWishlists(ctx context.Context) ([]Wishlist, error) {
	rows, err := q.db.QueryContext(ctx, listWishlists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wishlist
	for rows.Next() {
		var i Wishlist
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWishlist = `-- name: UpdateWishlist :exec
UPDATE wishlist
set name = ?,
    description  = ?
WHERE id = ?
`

type UpdateWishlistParams struct {
	Name        string
	Description sql.NullString
	ID          string
}

func (q *Queries) UpdateWishlist(ctx context.Context, arg UpdateWishlistParams) error {
	_, err := q.db.ExecContext(ctx, updateWishlist, arg.Name, arg.Description, arg.ID)
	return err
}
